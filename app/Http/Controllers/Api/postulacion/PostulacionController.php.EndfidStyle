<?php
namespace App\Http\Controllers\Api\postulacion;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Evaluado\Evaluado;
use App\Models\RRHH\Persona;
use App\Models\RRHH\PersonasProyectos;
use App\Models\RRHH\PersonaPostula;
use App\Models\RRHH\PersonaArchivo;
use App\Models\Core\Usuario;
use App\Models\Core\Comuna;
use App\Models\Core\Region;
use App\Models\Core\RolUsuario;
use App\Models\Core\RolProceso;
use App\Models\Infraestructura\Laboratorio;
use App\Models\Infraestructura\LaboratorioVisita;
use App\Models\Infraestructura\LaboratorioRevision;
use App\Models\Infraestructura\LaboratorioEquipo;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

require '/home/ecep2019/public_html/vendor/phpmailer/phpmailer/src/Exception.php';
require '/home/ecep2019/public_html/vendor/phpmailer/phpmailer/src/PHPMailer.php';
require '/home/ecep2019/public_html/vendor/phpmailer/phpmailer/src/SMTP.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;

class PostulacionController extends Controller
{
	 
	public function __construct()
    {
		$this->fields = array();	
    }	
	
	function corssAccept(Request $request){
		// header("Access-Control-Allow-Origin: *");
		// header("Access-Control-Allow-Methods: OPTIONS, POST, GET");
		// header("Access-Control-Allow-Headers: *");
	}
    
	public function index()
    {

    }

	public function descargaArchivo($id_persona_archivo){
        if($id_persona_archivo!=""){
			$personaArchivo = PersonaArchivo::where('token_descarga',$id_persona_archivo)->first();
			if(isset($personaArchivo->id_persona_archivo)){
				$persona = Persona::find($personaArchivo->id_persona);
				$decoded = base64_decode($personaArchivo->archivo);
				$file = 'tmp_file_'.$id_persona_archivo;
				file_put_contents($file, $decoded);
				
				if (file_exists($file)) {
					header('Content-Description: File Transfer');
					if($personaArchivo->mime_type!=""){
						header('Content-Type: '.$personaArchivo->mime_type);						
					}
					else{
						header('Content-Type: application/octet-stream');	
					}
					header('Content-Disposition: attachment; filename="'.$persona->run."_".$personaArchivo->tipo.".".$personaArchivo->extension.'"');
					header('Expires: 0');
					header('Cache-Control: must-revalidate');
					header('Pragma: public');
					header('Content-Length: ' . filesize($file));
					readfile($file);
					exit;
				}
				else{
					echo "no existe el archivo";
					exit;
				}
			}
			else{
				echo "no existe el archivo";
				exit;
			}			
		}
	}
	
	public function regionPorIdComuna(Request $request){
		//$this->corssAccept();
        $post = $request->all();

		$validacion = Validator::make($post, [
            'id_comuna_n' => 'int|nullable',
            'id_comuna_r' => 'int|nullable'
        ]);	
        
        if($validacion->fails()){
            return response()->json(array("respuesta"=>"error","descripcion"=>$validacion->errors()), 422); 
        }

        $comuna_n = Comuna::find($post["id_comuna_n"]);
        $comuna_r = Comuna::find($post["id_comuna_r"]);
        // if(!isset($comuna_n->id_comuna) || !isset($comuna_r->id_comuna)){
        //     return response()->json(array("respuesta"=>"error","descripcion"=>"El id de comuna no corresponde.")); 
        // }
        $arr["id_region_nacimiento"] = isset($comuna_n->id_region) ? $comuna_n->id_region : null;
        $arr["id_region_residencia"] = isset($comuna_r->id_region) ? $comuna_r->id_region : null;
        
        return response()->json(array("respuesta"=>"OK", "descripcion" => $arr));
	}
	
	public function saveUsuario(Request $request){
		$post = $request->all();

		if($post['run']!=""){
			$persona = Persona::where("run", $post["run"])->first();
			if(!isset($persona->id_persona)){
				$persona= new Persona();
				// Buscar email
				$pers_mail = Persona::where("email", $post["correo_electronico_principal"])->first();
				if(isset($pers_mail->id_persona)){
					if($pers_mail->run != $post["run"]){
						return response()->json(array("respuesta"=>"error","descripcion"=>"Ya existe un usuario registrado con el correo enviado.")); 
					}
				}
			}
			if($persona->modificado == true){
				$this->enviarNotificacionError("Usuario ya modific贸 su formulario de postulaci贸n", "Guardar usuario", $post);
				return response()->json(array("respuesta"=>"error","descripcion"=>"Usted ya envi贸 una postulaci贸n.")); 
			}
			
			$usuario = DB::select("SELECT id_usuario , usuario, contrasena FROM core.usuario WHERE borrado = false AND usuario = '" . trim(strtolower($post['usuario'])) . "'");
			if(!isset($usuario[0])){
				$editar = false;	
				$usuario = new Usuario();
				// Obtener ultimo id_usuario
				$id = Usuario::all()->last()->id_usuario;
				$clave1 = isset($post["nombres"]) ? trim(strtolower(str_replace(" ", "", $post["nombres"]))): "nombre";
				$clave2 = isset($post["apellido_paterno"]) ? trim(strtolower(str_replace(" ", "", $post["apellido_paterno"]))): "apellido";
				$usuario->usuario = $clave1 . $clave2 . ($id+1);
				$usuario->contrasena = md5("endfiD2018");        
				$usuario->id_tipo_usuario = 28;
				$usuario->borrado = false;
			}else{
				$editar = true;
				$usuario = Usuario::where("usuario", $post["usuario"])->first();
			}
			
			DB::beginTransaction();
			try{
				$usuario->save();
				//creamos en la tabla persona
				$persona->run = strtoupper($post['run']);
				$persona->nombres = isset($post["nombres"])?$post["nombres"]:null;
				$persona->apellido_paterno = isset($post["apellido_paterno"])?$post["apellido_paterno"]:null;
				$persona->apellido_materno = isset($post["apellido_materno"])?$post["apellido_materno"]:null;
				$nombre_completo = $post["nombres"] . " " . $post["apellido_paterno"];
				// Formatear fecha de nacimiento
				$date = isset($post["fecha_nacimiento"]) ? str_replace('/', '-', $post["fecha_nacimiento"]) : null;
				$persona->fecha_nacimiento = $date != null ? date('Y-m-d', strtotime($date)) : null;

				$persona->id_comuna_nacimiento = isset($post["id_comuna_nacimiento"])?$post["id_comuna_nacimiento"]:null;
				$persona->domicilio = isset($post["direccion_residencia"])?$post["direccion_residencia"]:null;
				$persona->domicilio_sector = isset($post["sector_residencia"])?$post["sector_residencia"]:null;
				$persona->nacionalidad = isset($post["nacionalidad"])?$post["nacionalidad"]:null;
				$persona->id_comuna_residencia = isset($post["id_comuna_residencia"])?$post["id_comuna_residencia"]:null;
				$persona->id_sexo = $post["id_sexo"];
				$persona->id_estado_civil = $post["id_estado_civil"];
				$persona->email = isset($post["correo_electronico_principal"])?$post["correo_electronico_principal"]:null;
				$persona->telefono = isset($post["telefono_principal"])?$post["telefono_principal"]:null;
				$persona->otro_lugar_nacimiento = isset($post["otro_lugar_nacimiento"])?$post["otro_lugar_nacimiento"]:null;
				$persona->otra_nacionalidad = isset($post["otra_nacionalidad"])?$post["otra_nacionalidad"]:null;
				$persona->modificado = isset($post["modificado"])?$post["modificado"]:null;

				$persona->nivel_estudios = isset($post["nivel_estudios"])?$post["nivel_estudios"]:null;
				$persona->universidad = isset($post["universidad"])?$post["universidad"]:null;
				if($post["id_universidad"] != 1000){
					$persona->id_institucion = isset($post["id_universidad"])?$post["id_universidad"]:null;	
				}
				else{
					$persona->id_institucion = null;	
				}
				
				$persona->profesion = $post["profesion"];

				$persona->licencia_conducir = isset($post["licencia_conducir"])?$post["licencia_conducir"]:null;
				$persona->automovil = isset($post["automovil"])?$post["automovil"]:null;
				$persona->licencia_clase = isset($post["clase_licencia"])?$post["clase_licencia"]:null;
				$_db = json_decode($post["datos_bancarios"],1);
				$persona->banco_nro_cuenta = $_db["numero_cuenta"];
				$persona->banco_tipo_cuenta = $_db["tipo_cuenta"];
				$persona->banco_nombre = $_db["banco"];
				
				$persona->id_usuario = $usuario->id_usuario;
				$persona->save();
				
				$tm = DB::select("SELECT id_tabla_maestra FROM core.tabla_maestra WHERE descripcion_corta = 'endfid2019' ");
				$id_proyecto = $tm[0]->id_tabla_maestra;
				
				if($editar == true){
					$personaProyecto = PersonasProyectos::where("id_persona", $persona->id_persona)->first();
					if(!isset($personaProyecto->id_persona_proyecto)){
						$personaProyecto = new PersonasProyectos();
						$personaProyecto->id_persona = $persona->id_persona;
						$personaProyecto->id_proyecto = $id_proyecto;
						$personaProyecto->save();
					}
				}else{
					$personaProyecto = new PersonasProyectos();
					$personaProyecto->id_persona = $persona->id_persona;
					$personaProyecto->id_proyecto = $id_proyecto;
					$personaProyecto->save();
				}
				$cargo = "";
				if($editar == false){
					if(isset($post["postula_examinador"]) && $post["postula_examinador"]=='true'){
						$cargo .= "examinador, ";
						$personaPostula = new PersonaPostula();
						$personaPostula->id_persona_proyecto = $personaProyecto->id_persona_proyecto;
						$personaPostula->id_rol_proceso = 8;
						$personaPostula->reclutamiento = true;
						$personaPostula->save();
					}
	
					if(isset($post["postula_supervisor"]) && $post["postula_supervisor"]=='true'){
						$cargo .= "supervisor, ";
						$personaPostula = new PersonaPostula();
						$personaPostula->id_persona_proyecto = $personaProyecto->id_persona_proyecto;
						$personaPostula->id_rol_proceso = 9;
						$personaPostula->reclutamiento = true;		
						$personaPostula->save();					
					}
					if(isset($post["postula_examinador_apoyo"]) && $post["postula_examinador_apoyo"]=='true'){
						$cargo .= "examinador de apoyo, ";
						$personaPostula = new PersonaPostula();
						$personaPostula->id_persona_proyecto = $personaProyecto->id_persona_proyecto;
						$personaPostula->id_rol_proceso = 1007;	
						$personaPostula->reclutamiento = true;
						$personaPostula->save();			
					}
					if(isset($post["postula_anfitrion"]) && $post["postula_anfitrion"]=='true'){
						$cargo .= "anfitri贸n, ";
						$personaPostula = new PersonaPostula();
						$personaPostula->id_persona_proyecto = $personaProyecto->id_persona_proyecto;
						$personaPostula->id_rol_proceso = 1006;	
						$personaPostula->reclutamiento = true;
						$personaPostula->save();			
					}
				}else{
					if(isset($post["postula_examinador"]) && $post["postula_examinador"]=='true'){
						$cargo .= "examinador, ";
						$personaPostula = PersonaPostula::where("id_persona_proyecto", $personaProyecto->id_persona_proyecto)->where("id_rol_proceso", 8)->first();
						if(!isset($personaPostula->id_persona_postula)){
							$personaPostula = new PersonaPostula();
							$personaPostula->id_persona_proyecto = $personaProyecto->id_persona_proyecto;
							$personaPostula->id_rol_proceso = 8;
							$personaPostula->reclutamiento = true;
							$personaPostula->save();
						}
					}
					if(isset($post["postula_examinador"]) && $post["postula_examinador"]=='false'){
						$personaPostula = PersonaPostula::where("id_persona_proyecto", $personaProyecto->id_persona_proyecto)->where("id_rol_proceso", 8)->first();
						if(isset($personaPostula->id_persona_postula)){
							$personaPostula->delete();
						}
					}
	
					if(isset($post["postula_supervisor"]) && $post["postula_supervisor"]=='true'){	
						$cargo .= "supervisor, ";
						$personaPostula = PersonaPostula::where("id_persona_proyecto", $personaProyecto->id_persona_proyecto)->where("id_rol_proceso", 9)->first();
						if(!isset($personaPostula->id_persona_postula)){
							$personaPostula = new PersonaPostula();
							$personaPostula->id_persona_proyecto = $personaProyecto->id_persona_proyecto;
							$personaPostula->id_rol_proceso = 9;
							$personaPostula->reclutamiento = true;
							$personaPostula->save();
						}
					}
					if(isset($post["postula_supervisor"]) && $post["postula_supervisor"]=='false'){	
						$personaPostula = PersonaPostula::where("id_persona_proyecto", $personaProyecto->id_persona_proyecto)->where("id_rol_proceso", 9)->first();
						if(isset($personaPostula->id_persona_postula)){
							$personaPostula->delete();
						}
					}

					if(isset($post["postula_examinador_apoyo"]) && $post["postula_examinador_apoyo"]=='true'){	
						$cargo .= "examinador de apoyo, ";
						$personaPostula = PersonaPostula::where("id_persona_proyecto", $personaProyecto->id_persona_proyecto)->where("id_rol_proceso", 1007)->first();
						if(!isset($personaPostula->id_persona_postula)){
							$personaPostula = new PersonaPostula();
							$personaPostula->id_persona_proyecto = $personaProyecto->id_persona_proyecto;
							$personaPostula->id_rol_proceso = 1007;
							$personaPostula->reclutamiento = true;
							$personaPostula->save();
						}
					}
					if(isset($post["postula_examinador_apoyo"]) && $post["postula_examinador_apoyo"]=='false'){	
						$personaPostula = PersonaPostula::where("id_persona_proyecto", $personaProyecto->id_persona_proyecto)->where("id_rol_proceso", 1007)->first();
						if(isset($personaPostula->id_persona_postula)){
							$personaPostula->delete();
						}
					}

					if(isset($post["postula_anfitrion"]) && $post["postula_anfitrion"]=='true'){
						$cargo .= "anfitri贸n, ";	
						$personaPostula = PersonaPostula::where("id_persona_proyecto", $personaProyecto->id_persona_proyecto)->where("id_rol_proceso", 1006)->first();
						if(!isset($personaPostula->id_persona_postula)){
							$personaPostula = new PersonaPostula();
							$personaPostula->id_persona_proyecto = $personaProyecto->id_persona_proyecto;
							$personaPostula->id_rol_proceso = 1006;
							$personaPostula->reclutamiento = true;
							$personaPostula->save();
						}
					}
					if(isset($post["postula_anfitrion"]) && $post["postula_anfitrion"]=='false'){	
						$personaPostula = PersonaPostula::where("id_persona_proyecto", $personaProyecto->id_persona_proyecto)->where("id_rol_proceso", 1006)->first();
						if(isset($personaPostula->id_persona_postula)){
							$personaPostula->delete();
						}
					}
				}				
			}catch (\Exception $e){
				DB::rollback();
				$this->enviarNotificacionError($e->getMessage(), "Guardar usuario", $post);
				return response()->json(['resultado'=>'error','descripcion'=>'Error al guardar. ()'. $e->getMessage()]);
			}
			DB::commit();
			$this->enviarNotificacionPostulacion($post["correo_electronico_principal"], $nombre_completo, $cargo);
			return response()->json(["respuesta"=>"ok","descripcion"=>"Se ha creado el usuario"]);
		}
	}
	
	public function subirArchivos(Request $request){
        $post = $request->all();

        $validacion = Validator::make($post, [
			'run' => 'required|string',
            'documento' => 'required|string',
            'nombreArchivo' => 'required|string',
            'tipo' => 'required|string',
            'id_persona_archivo' => 'int|nullable'
		]);	
			
		if ($validacion->fails()) {
			return response()->json(array("respuesta"=>"error","descripcion"=>$validacion->errors()), 422); 
        }
        
        $run = $post['run'];
        $documento = $post['documento'];
        $nombreArchivo = $post['nombreArchivo'];
        $tipo = $post["tipo"];

        /* ***** Tipos de archivo ******/
            /* cedula_identidad */
            /* curriculum */
            /* certificado_antecedentes */
            /* certificado_titulo */
		function diccionarioTipos($mimeType){
			$salida = "";
			switch ($mimeType) {
				case 'image/jpeg':
					$salida = "jpg";
					break;
				case 'image/png':
					$salida = "png";
					break;
				case 'application/pdf':
					$salida = "pdf";
					break;
				case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
					$salida = "docx";
					break;
				case 'application/msword':
					$salida = "doc";
					break;
			}
			return $salida;
		}

        $run = str_replace(".","", $post['run']);
		$run = str_replace("-","", $run);
		$run = strtoupper($run);
		$runNro = substr($run, 0,(strlen($run)-1));
		$runDV = substr($run, -1);
        $run = trim($runNro)."-".trim($runDV);
        
        $pers = Persona::where("run", $run)->first();

        $ext_exp = explode(".", $nombreArchivo);
        $ext = $ext_exp[sizeof($ext_exp)-1];

		$imgdata = base64_decode($documento);

		$f = finfo_open();

		$mime_type = finfo_buffer($f, $imgdata, FILEINFO_MIME_TYPE);

        if($post['id_persona_archivo'] == -1){
            $arc = new PersonaArchivo();
        }else{
            $arc = PersonaArchivo::find($post['id_persona_archivo']);
        }
        
        $arc->id_persona = $pers->id_persona;
        $arc->archivo = $documento;
		$arc->nombre_archivo = $nombreArchivo;
		$arc->mime_type = $mime_type;
        $arc->extension = diccionarioTipos($mime_type);
        $arc->tipo = $tipo;
        if($arc->save()){
            return response()->json(['resultado'=>'OK','descripcion'=>'Se ha guardado el archivo correctamente.']);
        }
	}

	function enviarNotificacionPostulacion($correo, $nombre, $cargo) {
		$subject = "Postulaci贸n - Evaluaci贸n Conocimientos Espec铆ficos y Pedag贸gicos";
		$html = "
		<p>Estimado " . $nombre . " </p>
		<p>Agradecemos su inter茅s en participar en Evaluaci贸n Conocimientos Espec铆ficos y Pedag贸gicos, como " . $cargo . ". Su postulaci贸n ha sido registrada. Revisaremos sus antecedentes y en caso de ser preseleccionado ser谩 contactado/a para coordinar la fecha y lugar de capacitaci贸n.</p>
		<br>
		<p>Saludos cordiales</p>
		<p>Equipo de Aplicaci贸n ECEP</p>";
			
		$mail = new PHPMailer(true); 
		
		try {
			$mail->isSMTP(); // tell to use smtp
			$mail->CharSet = "utf-8"; // set charset to utf8
			$mail->SMTPAuth = true;  // use smpt auth

			$mail->SMTPSecure = "ssl"; // tls or ssl
			$mail->Host = "mail.smtp2go.com"; 
			$mail->Port = 465; //443; 
			$mail->Username = "postulaciones_ecep@iie.cl";
			$mail->Password = "b2QxMmhzam9nc2kw";
			$mail->setFrom("postulaciones_ecep@iie.cl", "ECEP");
			$mail->Subject = $subject;
			$mail->MsgHTML($html);
			$mail->addAddress($correo, $nombre);
			$mail->addCc("alberto.paillao@iie.cl", "Alberto Paillao");
			$mail->send();
		} catch (phpmailerException $e) {
			//echo($e);
			arreglo($e->errorMessage());exit;
		} catch (Exception $e) {
			arreglo($e->errorMessage());exit;
			//echo($e);				
		}
	}

	function enviarNotificacionPreseleccion($correo, $nombre, $fecha, $direccion) {
		$subject = "Preseleccionado - Evaluaci贸n Conocimientos Espec铆ficos y Pedag贸gicos";
		$html = "
		<p>Estimado " . $nombre . " </p>
		<p>Usted ha sido preseleccionado para participar en Evaluaci贸n Conocimientos Espec铆ficos y Pedag贸gicos</p>
		<p>De acuerdo a su confirmaci贸n telef贸nica deber谩 participar de una jornada de capacitaci贸n, que se realizar谩 el d铆a " .$fecha. " en " . $direccion . ". Para ese d铆a debe haber le铆do el manual de capacitaci贸n adjunto.</p>
		<p>Adem谩s deber谩  firmar un acuerdo de confidencialidad, el cual se adjunta en este correo.</p>
		<br>
		<p>Saludos cordiales</p>
		<p>Equipo de Aplicaci贸n ECEP</p>";
			
		$mail = new PHPMailer(true); 
		
		try {
			$mail->isSMTP(); // tell to use smtp
			$mail->CharSet = "utf-8"; // set charset to utf8
			$mail->SMTPAuth = true;  // use smpt auth

			$mail->SMTPSecure = "ssl"; // tls or ssl
			$mail->Host = "smtp.gmail.com"; 
			$mail->Port = 465; //443; 
			$mail->Username = "postulaciones-ecep@iie.cl";
			$mail->Password = "ecep2019@iie@";
			$mail->setFrom("postulaciones-ecep@iie.cl", "ECEP");
			$mail->Subject = $subject;
			$mail->MsgHTML($html);
			$mail->addAddress($correo, $nombre);
			$mail->addCc("rene.altamirano@iie.cl", "Ren茅 Altamirano");
			$mail->addCc("raul.gutierrez@iie.cl", "Ra煤l Gutierrez");
			$mail->addCc("alberto.paillao@iie.cl", "Alberto Paillao");
			$mail->addCc("carlos.samain@iie.cl", "Carlos Samain");
			$mail->send();
		} catch (phpmailerException $e) {
			//echo($e);
			arreglo($e->errorMessage());exit;
		} catch (Exception $e) {
			arreglo($e->errorMessage());exit;
			//echo($e);				
		}
	}

	function enviarNotificacionError($error, $proceso, $post) {
		$cadena = "";
		foreach($post as $_p => $v){
			$cadena .= $_p . " => " .$v . "<br>";
		}
		$subject = "Error en guardado de datos - ECEP";
		$html = "
		<p>Equipo de Desarrollo ECEP:</p>
		<p>Se ha generado un error intentado guardar datos</p>
		<p>La informaci贸n del error es la siguiente:</p>
		<p>Proceso en el que se gener贸 el error: " . $proceso . "</p>
		<p>Descripci贸n del error: ".$error."</p>
		<p>Datos enviados en la petici贸n: <br>".$cadena."</p>
		<p>Saludos.</p>";
			
		$mail = new PHPMailer(true); 
		
		try {
			$mail->isSMTP(); // tell to use smtp
			$mail->CharSet = "utf-8"; // set charset to utf8
			$mail->SMTPAuth = true;  // use smpt auth
			
			$mail->SMTPSecure = "ssl"; // or ssl
			$mail->Host = "mail.smtp2go.com";
			$mail->Port = 443; // most likely something different for you. This is the mailtrap.io port i use for testing. 
			$mail->Username = "no-reply@diagnosticafid.cl";
			$mail->Password = "%rHP1uGeZYmq";
			
			$mail->setFrom("no-reply@diagnosticafid.cl", "ECEP");
			$mail->Subject = $subject;
			$mail->MsgHTML($html);
			$mail->addAddress("roberto.novoa@iie.cl", "Roberto Novoa");
			$mail->addCc("jimmy.gonzalez@iie.cl", "Jimmy Gonzalez");
			$mail->addCc("alberto.paillao@iie.cl", "Alberto Paillao");
			// $mail->AddAttachment($pdf, $estudiante->rut.".pdf");
			$mail->send();
		} catch (phpmailerException $e) {
			//echo($e);
			arreglo($e->errorMessage());exit;
		} catch (Exception $e) {
			arreglo($e->errorMessage());exit;
			//echo($e);				
		}
	}
}